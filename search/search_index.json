{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"Sapphire Core"},{"location":"/index.html#sapphire-core","text":"A JavaFX (ScalaFX) Application Framework for Scala User. It combines scala programming patterns with MVC for building complex JavaFX Applications.","title":"Sapphire Core"},{"location":"/index.html#frameworks","text":"","title":"Frameworks"},{"location":"/index.html#javafx","text":"Java UI Application Framework as replacement for Swing.\nSapphire depends on OpenJFX 11.\nhttps://openjfx.io","title":"JavaFX"},{"location":"/index.html#scalafx","text":"Sapphire depends on ScalaFX, a DSL for JavaFX written in Scala.","title":"ScalaFX"},{"location":"/index.html#dependency-injection","text":"Sapphire use Apache Deltaspike as CDI Abstraction Layer (1.9.x).\nThe default CDI implementation depends on Apache OpenWebBeans (2.0.x).","title":"Dependency Injection"},{"location":"/index.html#expression-language","text":"Expressions are resolved by JUEL.","title":"Expression Language"},{"location":"/index.html#setup","text":"","title":"Setup"},{"location":"/index.html#repository","text":"resolvers += \"sfxcode-bintray\" at \"https://dl.bintray.com/sfxcode/maven\"","title":"Repository"},{"location":"/index.html#artifact","text":"sbt libraryDependencies += \"com.sfxcode.sapphire\" %% \"sapphire-core\" % \"1.4.3\" Maven <dependency>\n  <groupId>com.sfxcode.sapphire</groupId>\n  <artifactId>sapphire-core_2.12</artifactId>\n  <version>1.4.3</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.sfxcode.sapphire', name: 'sapphire-core_2.12', version: '1.4.3'\n}","title":"Artifact"},{"location":"/index.html#licence","text":"Apache 2","title":"Licence"},{"location":"/features.html","text":"","title":"Features"},{"location":"/features.html#features","text":"","title":"Features"},{"location":"/features.html#application-environment-powered-by-cdi","text":"Application Controller UI Controller loading Parameter Provider Configuration Provider FXML Loading","title":"Application Environment powered by CDI"},{"location":"/features.html#bean-enhancement","text":"Every Java / Scala Bean can be used for FXBean FXBean has additional support for java/scala Maps FXBean resolves Expressions on bean FXBean creates Properties needed for Binding on demand FXBean has change management by default","title":"Bean Enhancement"},{"location":"/features.html#scala-javafx-bean-binding","text":"Bindings by form id Binding with converter Adapter Pattern (FXBean Adapter)","title":"Scala JavaFX Bean Binding"},{"location":"/features.html#viewcontroller","text":"Controller Lifecycle Node Locator Controller CDI Additions","title":"ViewController"},{"location":"/features.html#fxml-support","text":"Simple load from controller","title":"FXML Support"},{"location":"/development.html","text":"","title":"Development Setup"},{"location":"/development.html#development-setup","text":"Some tips and tricks.","title":"Development Setup"},{"location":"/development.html#dcevm-and-hotswapagent","text":"DCEVM together with HotSwapAgent can speedup your development. It enhance the ability of reloading of changed classes especially with scala.","title":"DCEVM and HotSwapAgent"},{"location":"/development.html#intellij-plugin","text":"An IntelliJ Plugin can be found at hotswap-agent-intellij-plugin.","title":"IntelliJ Plugin"},{"location":"/development.html#hot-scene-reloading","text":"","title":"Hot Scene Reloading"},{"location":"/development.html#setup","text":"Create a new method in your ApplicationController:\ndef replacePrimarySceneContent(): Unit = {\n    val newMainWindowController = getController[MainWindowController]()\n    replaceSceneContent(newMainWindowController)\n  }\nCreate a Button anywhere in your application and an corresponding action:\ndef actionReload(event: ActionEvent) {\n    getBean[ApplicationController]().replacePrimarySceneContent()\n  }","title":"Setup"},{"location":"/tools.html","text":"","title":"Development Tools"},{"location":"/tools.html#development-tools","text":"Some useful tools.","title":"Development Tools"},{"location":"/tools.html#intellij-ide","text":"IntelliJ is my favorite IDE for Scala / JavaFX Coding. Even the Community Edition has all features for developing JavaFX Applications.","title":"IntelliJ IDE"},{"location":"/tools.html#scenebuilder","text":"Scenebuilder (backed by Gluon) can be found at the Gluon Site.","title":"SceneBuilder"},{"location":"/tools.html#scenicview","text":"Scenic View is a JavaFX application designed to make it simple to understand the current state of your application scenegraph, and to also easily manipulate properties of the scenegraph without having to keep editing your code. This lets you find bugs, and get things pixel perfect without having to do the compile-check-compile dance.","title":"ScenicView"},{"location":"/tools.html#sbt-plugins","text":"","title":"SBT Plugins"},{"location":"/tools.html#sbt-javafx","text":"(Simple Build Tool) plugin for building JavaFx Application\nDocumentation","title":"sbt-javafx"},{"location":"/tutorial/setup.html","text":"","title":"Tutorial Setup"},{"location":"/tutorial/setup.html#tutorial-setup","text":"","title":"Tutorial Setup"},{"location":"/tutorial/setup.html#sources","text":"The sources for this tutorial are in the Integration Tests Directory of sapphire-core in the appdemo package.","title":"Sources"},{"location":"/tutorial/setup.html#simple-build-tool-setup","text":"name := \"project-name\"\n\norganization := \"your.organization\"\n\nversion := \"1.0.0\"\n\nscalaVersion := \"2.12.8\"\n\nresolvers += \"sfxcode-bintray\" at \"https://dl.bintray.com/sfxcode/maven\"\n\n// Test\n\nlibraryDependencies += \"org.specs2\" %% \"specs2-core\" % \"4.3.5\" % \"test\"\n\n// Compile\n\nlibraryDependencies += \"com.sfxcode.sapphire\" %% \"sapphire-core\" % \"1.4.2\"\nFull source at GitHub","title":"Simple Build Tool Setup"},{"location":"/tutorial/setup.html#ide","text":"IntelliJ IDEA Community Edition or other IDE with Scala support.","title":"IDE"},{"location":"/tutorial/setup.html#fxml-editor","text":"Helpful for FXML Editing is the Scene Builder.","title":"FXML Editor"},{"location":"/tutorial/setup.html#scene-graph-visualization","text":"For understanding of the sccene graph there is a tool called Scenic View .","title":"Scene Graph Visualization"},{"location":"/tutorial/application.html","text":"","title":"Tutorial Application"},{"location":"/tutorial/application.html#tutorial-application","text":"","title":"Tutorial Application"},{"location":"/tutorial/application.html#application-object","text":"A sapphire application must contain an Application object that extends FXApp.\napplicationStage must be implemented.\nimport com.sfxcode.sapphire.core.cdi.FXApp\n\nimport scalafx.application.JFXApp\nimport scalafx.application.JFXApp.PrimaryStage\nimport scalafx.scene.Scene\nimport scalafx.stage.Stage\n\nobject DemoApplication extends FXApp {\n  JFXApp.AutoShow = true\n\n  override def applicationStage: Stage = new PrimaryStage {\n    title = \"Sapphire Controller Demo\"\n    scene = new Scene {\n      minHeight = 600\n      minWidth = 800\n    }\n  }\n}\nFull source at GitHub","title":"Application object"},{"location":"/tutorial/application.html#applicationcontroller","text":"Application controller is used for startup purposes.\nNormally the main scene content is replaced by a ViewController.\nHere we will use a MainWindowController and later we connect a Navigation-, Workspace- and StatusBarController.\nimport com.sfxcode.sapphire.core.controller.AppController\nimport com.sfxcode.sapphire.core.demo.appdemo.controller.MainWindowController\n\nimport javax.enterprise.context.ApplicationScoped\nimport javax.inject.Named\n\n@Named\n@ApplicationScoped\nclass ApplicationController extends AppController {\n\n  def mainWindowController: MainWindowController = getController[MainWindowController]()\n\n  def applicationDidLaunch() {\n    logger.info(\"start \" + this)\n    reload()\n  }\n\n  // live reloading of scene content for rapid development\n  def reload(): Unit = {\n    applicationEnvironment.loadResourceBundle(\"com/sfxcode/sapphire/core/demo/appdemo/bundles/demo\")\n    replaceSceneContent(mainWindowController)\n  }\n\n}\nFull source at GitHub","title":"ApplicationController"},{"location":"/tutorial/application.html#mainwindowcontroller","text":"The following code snippet loads the MainWindowController by the FXMLoader from the CDI managed ApplicationController Bean.\ndef mainWindowController = getController[MainWindowController]()\nThis pattern for Controller-Loading is commonly used in sapphire-core Framework.","title":"MainWindowController"},{"location":"/tutorial/main_window.html","text":"","title":"Tutorial Main Window"},{"location":"/tutorial/main_window.html#tutorial-main-window","text":"","title":"Tutorial Main Window"},{"location":"/tutorial/main_window.html#mainwindow-fxml-file","text":"The MainWindowController in the ApplicationController needs a valid FXML File. The bindings for Navigation, Workspace and StatusBar Controller uses the fx:id values.\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import java.net.*?>\n<?import javafx.scene.layout.*?>\n\n<AnchorPane xmlns=\"http://javafx.com/javafx/8\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"com.sfxcode.sapphire.core.demo.appdemo.controller.MainWindowController\">\n    <children>\n        <BorderPane AnchorPane.bottomAnchor=\"0.0\" AnchorPane.leftAnchor=\"0.0\"\n                    AnchorPane.rightAnchor=\"0.0\" AnchorPane.topAnchor=\"0.0\">\n            <top>\n                <AnchorPane fx:id=\"navigationPane\"\n                            minHeight=\"40.0\" maxHeight=\"40.0\"\n                            styleClass=\"navigation\" />\n            </top>\n            <center>\n                <AnchorPane fx:id=\"workspacePane\"\n                            prefHeight=\"520.0\" prefWidth=\"800.0\"/>\n            </center>\n            <bottom>\n                <AnchorPane fx:id=\"statusPane\"\n                            minHeight=\"20.0\" maxHeight=\"20.0\"\n                            styleClass=\"status\" />\n            </bottom>\n        </BorderPane>\n    </children>\n    <stylesheets>\n        <URL value=\"@MainWindow.css\" />\n    </stylesheets>\n</AnchorPane>\nFull source at GitHub","title":"MainWindow FXML File"},{"location":"/tutorial/main_window.html#mainwindowcontroller","text":"For adding SubController and displaying their UI content following steps are needed:\nPrepare SubController Connect with FXML identifier Define ContentManager Load Controller in the MainWindowController LifeCycle Optional Prepare Functions for Controller switching Optional CDI based Functions / Injection Points","title":"MainWindowController"},{"location":"/tutorial/main_window.html#prepare-subcontroller","text":"// workspaces\nlazy val workspaceController = getController[WorkspaceController]()\nlazy val secondWorkspaceController = getController[SecondWorkspaceController]()\nlazy val thirdWorkspaceController = getController[ThirdWorkspaceController]()\n\n// navigation\nlazy val defaultNavigationController = getController[DefaultNavigationController]()\nlazy val secondNavigationController = getController[SecondNavigationController]()\n\nlazy val statusBarController = new StatusBarController()\nFull source at GitHub","title":"Prepare SubController"},{"location":"/tutorial/main_window.html#connect-with-fxml-identifier","text":"@FXML\nvar workspacePane: Pane = _\n@FXML\nvar statusPane: Pane = _\n@FXML\nvar navigationPane: Pane = _\nFull source at GitHub","title":"Connect with FXML identifier"},{"location":"/tutorial/main_window.html#contentmanager","text":"var workspaceManager: ContentManager = _\nvar navigationManager: ContentManager = _\nFull source at GitHub","title":"ContentManager"},{"location":"/tutorial/main_window.html#init-controller","text":"override def didGainVisibilityFirstTime() {\n  workspaceManager = ContentManager(workspacePane, this, workspaceController)\n  // enable stack based navigation for the workspaceManager\n  workspaceManager.enableStack()\n  navigationManager = ContentManager(navigationPane, this, defaultNavigationController)\n  updatePaneContent(statusPane, statusBarController)\n}\nFull source at GitHub","title":"Init Controller"},{"location":"/tutorial/main_window.html#switch-controller-optional-","text":"Prepare helper functions for workspace view changes.\ndef showWorkspaceController() {\n  workspaceManager.updatePaneContent(workspaceController)\n}\n\ndef showSecondWorkspaceController() {\n  workspaceManager.updatePaneContent(secondWorkspaceController)\n}\nFull source at GitHub","title":"Switch Controller (optional)"},{"location":"/tutorial/main_window.html#cdi-optional-","text":"Make use of CDI Observers, Injection Points, …\ndef listenToChanges(@Observes event: ContentDidChangeEvent) {\n  logger.debug(event.toString)\n}\nFull source at GitHub","title":"CDI (optional)"},{"location":"/tutorial/navigation.html","text":"","title":"Tutorial Navigation"},{"location":"/tutorial/navigation.html#tutorial-navigation","text":"","title":"Tutorial Navigation"},{"location":"/tutorial/navigation.html#navigation-fxml-file","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import javafx.geometry.Insets?>\n<?import javafx.scene.control.Button?>\n<?import javafx.scene.layout.AnchorPane?>\n<?import javafx.scene.layout.HBox?>\n\n<AnchorPane prefHeight=\"40.0\"\n            xmlns=\"http://javafx.com/javafx/8.0.121\" xmlns:fx=\"http://javafx.com/fxml/1\"\n            fx:controller=\"com.sfxcode.sapphire.core.demo.appdemo.controller.DefaultNavigationController\">\n    <children>\n        <HBox layoutY=\"-10.0\" prefHeight=\"40.0\" spacing=\"10.0\" AnchorPane.bottomAnchor=\"0.0\" AnchorPane.leftAnchor=\"0.0\" AnchorPane.rightAnchor=\"-44.0\" AnchorPane.topAnchor=\"0.0\">\n            <children>\n                <Button onAction=\"#actionShowWorkspaceController\" text=\"Workspace 1\" />\n                <Button onAction=\"#actionShowSecondWorkspaceController\" text=\"Workspace 2\" />\n                <Button onAction=\"#actionShowThirdWorkspaceController\" text=\"Workspace 3\" />\n                <Button onAction=\"#actionReload\" text=\"Reload\" />\n                <Button onAction=\"#actionLoadWorkspaceFromStack\" text=\"Last From Stack\" />\n                <Button onAction=\"#actionToggleNavigation\" text=\"Toggle Nav\" />\n                <Button onAction=\"#actionExit\" text=\"Exit\" />\n            </children>\n            <padding>\n                <Insets left=\"10.0\" top=\"5.0\" />\n            </padding>\n        </HBox>\n    </children>\n</AnchorPane>\nFull source at GitHub","title":"Navigation FXML File"},{"location":"/tutorial/navigation.html#navigationcontroller","text":"package com.sfxcode.sapphire.core.demo.appdemo.controller\n\nimport com.sfxcode.sapphire.core.controller.ViewController\nimport com.sfxcode.sapphire.core.demo.appdemo.ApplicationController\nimport javafx.event.ActionEvent\n\nclass DefaultNavigationController extends ViewController {\n\n  def applicationController: ApplicationController = applicationEnvironment.applicationController.asInstanceOf[ApplicationController]\n\n  def mainWindowController: MainWindowController = {\n    parent.asInstanceOf[MainWindowController]\n  }\n\n  def actionShowWorkspaceController(event: ActionEvent) {\n    mainWindowController.showWorkspaceController()\n  }\n\n  def actionShowSecondWorkspaceController(event: ActionEvent) {\n    mainWindowController.showSecondWorkspaceController()\n  }\n\n  def actionShowThirdWorkspaceController(event: ActionEvent) {\n    mainWindowController.showThirdWorkspaceController()\n  }\n\n  def actionLoadWorkspaceFromStack(event: ActionEvent) {\n    mainWindowController.workspaceManager.loadFromStack()\n  }\n\n  def actionReload(event: ActionEvent) {\n    getBean[ApplicationController]().reload()\n  }\n\n  def actionToggleNavigation(event: ActionEvent) {\n    mainWindowController.toggleNavigation()\n  }\n\n  def actionExit(event: ActionEvent): Unit = {\n    applicationController.exit()\n  }\n\n}\nFull source at GitHub","title":"NavigationController"},{"location":"/detail/fxbean.html","text":"","title":"In Depth FXBean"},{"location":"/detail/fxbean.html#in-depth-fxbean","text":"FXBean is one of the core concepts of this framework. It is an adapter for Java/Scala Beans (Maps) for automatic JavaFX Binding. FXBean does all the JavaFX Property Binding for your Application.","title":"In Depth FXBean"},{"location":"/detail/fxbean.html#features","text":"Every Java / Scala Bean can be used for FXBean FXBean has additional support for Java / Scala Maps FXBean resolves Expressions on bean FXBean creates Properties needed for Binding on demand FXBean has change management by default\nHint Use Sapphire Includes for implicit Bean to FXBean Conversion","title":"Features"},{"location":"/detail/fxbean.html#example","text":"case class Author(name: String)\ncase class Book(id: Long, title: String, pages: Int, author: Author)\n\n// create FXBean for sample case class\nval scalaBook = Book(1, \"Programming In Scala\", 852, Author(\"Martin Odersky\"))\nval book = FXBean[Book](scalaBook)\n\n// getValue and updateValue are used for bean property access and modification\n// getProperty, getStringProperty ... \n// are used for automatic create a JavaFX Property\nval title = book.getValue(\"title\")  // \"Programming In Scala\"\nval titleProperty = book.getStringProperty(\"title\")\n\nbook.updateValue(\"title\", \"Programming In Scala 3.0\") // title is updated, titleProperty as well\nval newTitle = book.getValue(\"title\")  // \"Programming In Scala 3.0\"\nval newTitleFromProperty = titleProperty.getValue  // \"Programming In Scala 3.0\"\n\n// getValue and updateValue for underlying class by dot syntax\nval authorName = book.getValue(\"author.name\")  // \"Martin Odersky\"","title":"Example"},{"location":"/detail/fxml_loading.html","text":"","title":"In Depth FxmlLoading"},{"location":"/detail/fxml_loading.html#in-depth-fxmlloading","text":"","title":"In Depth FxmlLoading"},{"location":"/detail/fxml_loading.html#features","text":"load fxml by controller name (convention over configuration load fxml by custom name CDI powered ViewController (FXMLLoader, FXMLLoaderProvider) ViewController rootPane is bound to fxml root element","title":"Features"},{"location":"/detail/fxml_loading.html#example","text":"ViewController extends FxmlLoading trait. FxmlLoading provide the\ngetController[T <: ViewController](fxml: String = \"\")\nmethod. The package path of the controller is the default fxml directory. [name]Controller is converted to [name].fxml (WorkspaceController -> Workspace.fxml).\npackage controller\n\nclass MainWindowController extends ViewController with LazyLogging {\n\n  // #controllerLoading\n  // workspaces\n  lazy val workspaceController = getController[WorkspaceController]()\n  // navigation\n  lazy val defaultNavigationController = \n     getController[DefaultNavigationController]()\n  \n}\nWorkspaceController fxml must be saved at /controller/Workspace.fxml.","title":"Example"},{"location":"/detail/fxml_loading.html#custom-fxml-path","text":"","title":"Custom fxml path"},{"location":"/detail/fxml_loading.html#option-1-define-path-in-getcontroller-","text":"lazy val controller = \n     getController[WorkspaceController](\"/fxml/special/path/special_name.fxml\")\nWorkspaceController fxml must be saved at /fxml/special/path/special_name.fxml.","title":"Option 1: Define path in getController:"},{"location":"/detail/fxml_loading.html#option-2-define-path-in-application-conf-","text":"sapphire.core.fxml.basePath=\"/fxml/\"\nWorkspaceController fxml must be saved at /fxml/Workspace.fxml.","title":"Option 2: Define path in application.conf:"},{"location":"/detail/view_controller.html","text":"","title":"In Depth ViewController"},{"location":"/detail/view_controller.html#in-depth-viewcontroller","text":"The ViewController is the core pattern for component based application design.","title":"In Depth ViewController"},{"location":"/detail/view_controller.html#features","text":"Controller Lifecycle Node Locator Controller CDI Additions","title":"Features"},{"location":"/extension.html","text":"","title":"Sapphire Extension"},{"location":"/extension.html#sapphire-extension","text":"The Sapphire Extension Framework adds additional features to sapphire-core.","title":"Sapphire Extension"},{"location":"/extension.html#features","text":"","title":"Features"},{"location":"/extension.html#common","text":"Advanced Table Support Advanced Filter Support","title":"Common"},{"location":"/extension.html#controls","text":"DataListView DualDataListView","title":"Controls"},{"location":"/extension.html#controller","text":"DataTableController EditorController Maser/Detail Controller","title":"Controller"},{"location":"/extension.html#download","text":"","title":"Download"},{"location":"/sample/basic.html","text":"","title":"Samples Basic"},{"location":"/sample/basic.html#samples-basic","text":"Basic sapphire-core examples.","title":"Samples Basic"},{"location":"/sample/basic.html#sapphire-demo","text":"There is a Demo Project with sample applications on github: sapphire-demo","title":"sapphire-demo"},{"location":"/sample/basic.html#login-demo","text":"JavaFX Login Demo pimped by Sapphire.","title":"Login Demo"},{"location":"/sample/basic.html#issues-demo","text":"JavaFX Issues Demo pimped by Sapphire.","title":"Issues Demo"},{"location":"/sample/basic.html#tutorial","text":"Tutorial Application.","title":"Tutorial"},{"location":"/sample/advanced.html","text":"","title":"Samples Advanced"},{"location":"/sample/advanced.html#samples-advanced","text":"Advanced sapphire-core examples.","title":"Samples Advanced"},{"location":"/sample/advanced.html#sapphire-jfoenix-demo","text":"There is a Demo Project build with JFoenix on github: sapphire-jfoenix-demo","title":"sapphire-jfoenix-demo"},{"location":"/changes.html","text":"","title":"Version History"},{"location":"/changes.html#version-history","text":"","title":"Version History"},{"location":"/changes.html#current-version","text":"","title":"Current Version"},{"location":"/changes.html#download","text":"","title":"Download"},{"location":"/changes.html#history","text":"# Changes #\n\n## Versions\n\n### 1.4.3\n* FXBean Change management for complex case classes\n\n### 1.4.2\n* scala 2.12.8\n* openwebbeans 2.0.8\n* sbt 1.2.7\n\n### 1.4.1\n* sbt 1.2.6\n* child controller handling\n\n### 1.4.0\n* OpenJFX 11\n* Java 11\n* drop scala 2.11 support\n* scala 2.12.7\n* scalafx 11-R16\n\n### 1.3.4\n\n* appController exit method\n\n\n### 1.3.3\n\n* FXBean Fixes\n* FXBean property methods added e.g. getStringProperty\n\n\n### 1.3.0\n\n* Paradox Documentation\n* Lifecycle refactored (canGainVisibility)\n* ViewController children controller added\n\n\n### 1.1.0\n\n* ScalaFxmlLoading\n* ScalaViewController\n\n### 1.0.8\n\n* integration tests\n* deltaspike 1.5.2\n\n### 1.0.7\n\n* internationalization\n* travis integration\n* test cleanup\n* Integration tests moved to it\nFull source at GitHub","title":"History"}]}