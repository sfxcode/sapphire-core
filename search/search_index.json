{"docs":[{"location":"/index.html","text":"","title":"sapphire-core"},{"location":"/index.html#sapphire-core","text":"A JavaFX (ScalaFX) Application Framework for Scala User. It combines scala programming patterns with MVC for building complex JavaFX Applications.","title":"sapphire-core"},{"location":"/index.html#additional-documentation","text":"","title":"Additional Documentation"},{"location":"/index.html#javafx","text":"Java UI Application Framework as replacement for Swing.\nSapphire depends on JavaFX 8, which is included in JDK 8.\nhttp://www.oracle.com/technetwork/java/javafx/overview/index.html","title":"JavaFX"},{"location":"/index.html#scalafx","text":"Sapphire depends on ScalaFX, A DSL for JavaFX written in Scala.","title":"ScalaFX"},{"location":"/index.html#dependency-injection","text":"Sapphire use Apache Deltaspike as CDI Abstraction Layer (1.8.x).\nThe default CDI implementation depends on Apache OpenWebBeans (2.0.x).","title":"Dependency Injection"},{"location":"/index.html#expression-language","text":"Expressions are resolved by JUEL.","title":"Expression Language"},{"location":"/index.html#dependency-setup","text":"sbt libraryDependencies += \"com.sfxcode.nosql\" %% \"sapphire-core\" % \"1.3.1\" Maven <dependency>\n  <groupId>com.sfxcode.nosql</groupId>\n  <artifactId>sapphire-core_2.12</artifactId>\n  <version>1.3.1</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.sfxcode.nosql', name: 'sapphire-core_2.12', version: '1.3.1'\n}","title":"Dependency Setup"},{"location":"/index.html#licence","text":"Apache 2","title":"Licence"},{"location":"/features.html","text":"","title":"Features"},{"location":"/features.html#features","text":"","title":"Features"},{"location":"/features.html#application-environment-powered-by-cdi","text":"Application Controller UI Controller loading Parameter Provider Configuration Provider FXML Loading","title":"Application Environment powered by CDI"},{"location":"/features.html#bean-enhancement","text":"Every Java / Scala Bean can be used for FXBean FXBean has additional support for java/scala Maps FXBean resolves Expressions on bean FXBean creates Properties needed for Binding on demand FXBean has change management by default","title":"Bean Enhancement"},{"location":"/features.html#scala-javafx-bean-binding","text":"Bindings by form id Binding with converter Adapter Pattern (FXBean Adapter)","title":"Scala JavaFX Bean Binding"},{"location":"/features.html#viewcontroller","text":"Controller Lifecycle Node Locator Controller CDI Additions","title":"ViewController"},{"location":"/features.html#fxml-support","text":"Simple load from controller","title":"FXML Support"},{"location":"/tutorial/setup.html","text":"","title":"Tutorial Setup"},{"location":"/tutorial/setup.html#tutorial-setup","text":"","title":"Tutorial Setup"},{"location":"/tutorial/setup.html#sources","text":"The sources for this tutorial are in the Integration Tests Directory of sapphire-core in the appdemo package.","title":"Sources"},{"location":"/tutorial/setup.html#simple-build-tool-setup","text":"name := \"project-name\"\n\norganization := \"your.organization\"\n\nversion := \"1.0.0\"\n\nscalaVersion := \"2.12.4\"\n\nresolvers += \"sfxcode-bintray\" at \"https://dl.bintray.com/sfxcode/maven\"\n\n// Test\n\nlibraryDependencies += \"org.specs2\" %% \"specs2-core\" % \"4.0.2\" % \"test\"\n\n// Compile\n\nlibraryDependencies += \"com.sfxcode.sapphire\" %% \"sapphire-core\" % \"1.3.1\"","title":"Simple Build Tool Setup"},{"location":"/tutorial/setup.html#ide","text":"IntelliJ IDEA Community Edition or other IDE with Scala support.","title":"IDE"},{"location":"/tutorial/setup.html#fxml-editor","text":"Helpful for FXML Editing is the Scene Builder.","title":"FXML Editor"},{"location":"/tutorial/setup.html#scene-graph-visualization","text":"For understanding of the sccene graph there is a tool called Scenic View .","title":"Scene Graph Visualization"},{"location":"/tutorial/application.html","text":"","title":"Tutorial Application"},{"location":"/tutorial/application.html#tutorial-application","text":"","title":"Tutorial Application"},{"location":"/tutorial/application.html#application-object","text":"A sapphire application must contain an Application object that extends FXApp.\napplicationStage must be implemented.\nimport com.sfxcode.sapphire.core.cdi.FXApp\n\nimport scalafx.application.JFXApp\nimport scalafx.application.JFXApp.PrimaryStage\nimport scalafx.scene.Scene\nimport scalafx.stage.Stage\n\nobject DemoApplication extends FXApp {\n  JFXApp.AutoShow = true\n\n  override def applicationStage: Stage = new PrimaryStage {\n    title = \"Sapphire Controller Demo\"\n    scene = new Scene {\n      minHeight = 600\n      minWidth = 800\n    }\n  }\n}","title":"Application object"},{"location":"/tutorial/application.html#applicationcontroller","text":"Application controller is used for startup purposes.\nNormally the main scene content is replaced by a ViewController.\nHere we will use a MainWindowController and later we connect a Navigation-, Workspace- and StatusBarController.\nimport com.sfxcode.sapphire.core.controller.AppController\nimport com.sfxcode.sapphire.core.demo.appdemo.controller.MainWindowController\n\nimport javax.enterprise.context.ApplicationScoped\nimport javax.inject.Named\n\n@Named\n@ApplicationScoped\nclass BaseApplicationController extends AppController {\n\n  def mainWindowController: MainWindowController = getController[MainWindowController]()\n\n  def applicationDidLaunch() {\n    logger.info(\"start \" + this)\n    reload()\n  }\n\n  // live reloading of scene content for rapid development\n  def reload(): Unit = {\n    applicationEnvironment.loadResourceBundle(\"com/sfxcode/sapphire/core/demo/appdemo/bundles/demo\")\n    replaceSceneContent(mainWindowController)\n  }\n\n}","title":"ApplicationController"},{"location":"/tutorial/application.html#mainwindowcontroller","text":"The following code snippet loads the MainWindowController by the FXMLoader from the CDI managed ApplicationController Bean.\ndef mainWindowController = getController[MainWindowController]()\nThis pattern for Controller-Loading is commonly used in sapphire-core Framework.","title":"MainWindowController"},{"location":"/tutorial/main_window.html","text":"","title":"Tutorial Main Window"},{"location":"/tutorial/main_window.html#tutorial-main-window","text":"","title":"Tutorial Main Window"},{"location":"/tutorial/main_window.html#mainwindow-fxml-file","text":"The MainWindowController in the ApplicationController needs a valid FXML File. The bindings for Navigation, Workspace and StatusBar Controller uses the fx:id values.\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import java.net.*?>\n<?import javafx.scene.layout.*?>\n\n<AnchorPane xmlns=\"http://javafx.com/javafx/8\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"com.sfxcode.sapphire.core.demo.appdemo.controller.MainWindowController\">\n    <children>\n        <BorderPane AnchorPane.bottomAnchor=\"0.0\" AnchorPane.leftAnchor=\"0.0\"\n                    AnchorPane.rightAnchor=\"0.0\" AnchorPane.topAnchor=\"0.0\">\n            <top>\n                <AnchorPane fx:id=\"navigationPane\"\n                            minHeight=\"40.0\" maxHeight=\"40.0\"\n                            styleClass=\"navigation\" />\n            </top>\n            <center>\n                <AnchorPane fx:id=\"workspacePane\"\n                            prefHeight=\"520.0\" prefWidth=\"800.0\"/>\n            </center>\n            <bottom>\n                <AnchorPane fx:id=\"statusPane\"\n                            minHeight=\"20.0\" maxHeight=\"20.0\"\n                            styleClass=\"status\" />\n            </bottom>\n        </BorderPane>\n    </children>\n    <stylesheets>\n        <URL value=\"@MainWindow.css\" />\n    </stylesheets>\n</AnchorPane>","title":"MainWindow FXML File"},{"location":"/tutorial/main_window.html#mainwindowcontroller","text":"For adding SubController and displaying their UI content following steps are needed:\nPrepare SubController Connect with FXML identifier Define ContentManager Load Controller in the MainWindowController LifeCycle Optional Prepare Functions for Controller switching Optional CDI based Functions / Injection Points","title":"MainWindowController"},{"location":"/tutorial/main_window.html#prepare-subcontroller","text":"// workspaces\nlazy val workspaceController = getController[WorkspaceController]()\nlazy val secondWorkspaceController = getController[SecondWorkspaceController]()\nlazy val thirdWorkspaceController = getController[ThirdWorkspaceController]()\n\n// navigation\nlazy val defaultNavigationController = getController[DefaultNavigationController]()\nlazy val secondNavigationController = getController[SecondNavigationController]()","title":"Prepare SubController"},{"location":"/tutorial/main_window.html#connect-with-fxml-identifier","text":"@FXML\nvar workspacePane: Pane = _\n@FXML\nvar statusPane: Pane = _\n@FXML\nvar navigationPane: Pane = _","title":"Connect with FXML identifier"},{"location":"/tutorial/main_window.html#contentmanager","text":"var workspaceManager: ContentManager = _\nvar navigationManager: ContentManager = _","title":"ContentManager"},{"location":"/tutorial/main_window.html#init-controller","text":"override def didGainVisibilityFirstTime() {\n  workspaceManager = ContentManager(workspacePane, this, workspaceController)\n  // enable stack based navigation for the workspaceManager\n  workspaceManager.enableStack()\n  navigationManager = ContentManager(navigationPane, this, defaultNavigationController)\n}","title":"Init Controller"},{"location":"/tutorial/main_window.html#switch-controller-optional-","text":"Prepare helper functions for workspace view changes.\ndef showWorkspaceController() {\n  workspaceManager.updatePaneContent(workspaceController)\n}\n\ndef showSecondWorkspaceController() {\n  workspaceManager.updatePaneContent(secondWorkspaceController)\n}","title":"Switch Controller (optional)"},{"location":"/tutorial/main_window.html#cdi-optional-","text":"Make use of CDI Observers, Injection Points, …\ndef listenToChanges(@Observes event: ContentDidChangeEvent) {\n  logger.debug(event.toString)\n}","title":"CDI (optional)"},{"location":"/tutorial/navigation.html","text":"","title":"Tutorial Navigation"},{"location":"/tutorial/navigation.html#tutorial-navigation","text":"","title":"Tutorial Navigation"},{"location":"/tutorial/navigation.html#navigation-fxml-file","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import javafx.geometry.Insets?>\n<?import javafx.scene.control.*?>\n<?import javafx.scene.layout.*?>\n<AnchorPane prefHeight=\"40.0\"\n            xmlns=\"http://javafx.com/javafx/8.0.65\" xmlns:fx=\"http://javafx.com/fxml/1\"\n            fx:controller=\"com.sfxcode.sapphire.core.demo.appdemo.controller.DefaultNavigationController\">\n    <children>\n        <HBox layoutY=\"-10.0\" prefHeight=\"40.0\" spacing=\"10.0\"\n              AnchorPane.bottomAnchor=\"0.0\" AnchorPane.leftAnchor=\"0.0\"\n              AnchorPane.rightAnchor=\"-44.0\" AnchorPane.topAnchor=\"0.0\">\n            <children>\n                <Button onAction=\"#actionShowWorkspaceController\" text=\"Workspace 1\"/>\n                <Button onAction=\"#actionShowSecondWorkspaceController\" text=\"Workspace 2\"/>\n                <Button onAction=\"#actionShowThirdWorkspaceController\" text=\"Workspace 3\"/>\n                <Button onAction=\"#actionReload\" text=\"Reload\"/>\n                <Button onAction=\"#actionLoadWorkspaceFromStack\" text=\"Workspace From Stack\"/>\n                <Button onAction=\"#actionToggleNavigation\" text=\"Switch Navigation\"/>\n            </children>\n            <padding>\n                <Insets left=\"10.0\" top=\"5.0\"/>\n            </padding>\n        </HBox>\n    </children>\n</AnchorPane>","title":"Navigation FXML File"},{"location":"/tutorial/navigation.html#navigationcontroller","text":"package com.sfxcode.sapphire.core.demo.appdemo.controller\n\nimport javafx.event.ActionEvent\n\nimport com.sfxcode.sapphire.core.controller.ViewController\nimport com.sfxcode.sapphire.core.demo.appdemo.BaseApplicationController\n\nclass DefaultNavigationController extends ViewController {\n\n  def mainWindowController: MainWindowController = {\n    parent.asInstanceOf[MainWindowController]\n  }\n\n  def actionShowWorkspaceController(event: ActionEvent) {\n    mainWindowController.showWorkspaceController()\n  }\n\n  def actionShowSecondWorkspaceController(event: ActionEvent) {\n    mainWindowController.showSecondWorkspaceController()\n  }\n\n  def actionShowThirdWorkspaceController(event: ActionEvent) {\n    mainWindowController.showThirdWorkspaceController()\n  }\n\n  def actionLoadWorkspaceFromStack(event: ActionEvent) {\n    mainWindowController.workspaceManager.loadFromStack()\n  }\n\n  def actionReload(event: ActionEvent) {\n    getBean[BaseApplicationController]().reload()\n  }\n\n  def actionToggleNavigation(event: ActionEvent) {\n    mainWindowController.toggleNavigation()\n  }\n\n}","title":"NavigationController"}]}