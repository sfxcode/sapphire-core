{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"Sapphire Core"},{"location":"/index.html#sapphire-core","text":"A JavaFX Application Framework for Scala User. It combines scala programming patterns with MVC for building complex JavaFX Applications.","title":"Sapphire Core"},{"location":"/index.html#cross-build","text":"Build and tested against Scala 2.12/2.13 and JDK 11/12","title":"Cross Build"},{"location":"/index.html#frameworks","text":"","title":"Frameworks"},{"location":"/index.html#javafx","text":"Java UI Application Framework as replacement for Swing.\nSapphire depends on OpenJFX 11/12.\nJavaFX Code Samples Samles under CatalogJavaFX\nhttps://openjfx.io","title":"JavaFX"},{"location":"/index.html#dependency-injection","text":"Sapphire use Apache Deltaspike as CDI Abstraction Layer (1.9.x).\nThe default CDI implementation depends on Apache OpenWebBeans (2.0.x).","title":"Dependency Injection"},{"location":"/index.html#expression-language","text":"Expressions are resolved by JUEL.","title":"Expression Language"},{"location":"/index.html#maven","text":"Sapphire is published to Bintray and linked to Maven Central.","title":"Maven"},{"location":"/index.html#repository","text":"resolvers += \"sfxcode-bintray\" at \"https://dl.bintray.com/sfxcode/maven\"","title":"Repository"},{"location":"/index.html#artifact","text":"sbt libraryDependencies += \"com.sfxcode.sapphire\" % \"sapphire-core_2.12\" % \"1.6.10-SNAPSHOT\" Maven <dependency>\n  <groupId>com.sfxcode.sapphire</groupId>\n  <artifactId>sapphire-core_2.12</artifactId>\n  <version>1.6.10-SNAPSHOT</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.sfxcode.sapphire', name: 'sapphire-core_2.12', version: '1.6.10-SNAPSHOT'\n}","title":"Artifact"},{"location":"/index.html#demos","text":"Explore demos and Tutorial in project demo directory.","title":"Demos"},{"location":"/index.html#licence","text":"Apache 2","title":"Licence"},{"location":"/features.html","text":"","title":"Features"},{"location":"/features.html#features","text":"","title":"Features"},{"location":"/features.html#application-environment-powered-by-cdi","text":"WindowController ViewController Parameter Provider Configuration Provider FXML Loading Hot Reload","title":"Application Environment powered by CDI"},{"location":"/features.html#bean-enhancement","text":"Every Java / Scala Bean can be used for FXBean FXBean has additional support for Java/Scala Maps FXBean resolves Expressions on bean FXBean creates Properties needed for Binding on demand FXBean has change management by default","title":"Bean Enhancement"},{"location":"/features.html#scala-javafx-bean-binding","text":"Bindings by form id Binding with converter Adapter Pattern (FXBean Adapter)","title":"Scala JavaFX Bean Binding"},{"location":"/features.html#windowcontroller","text":"Stage Scene Replace Scene Content","title":"WindowController"},{"location":"/features.html#","text":"Controller Lifecycle Node Locator Controller CDI Additions Controller Lookup by CDI","title":"ViewController"},{"location":"/features.html#first-class-fxml-support","text":"Simple load from controller pattern Different fxml path options","title":"First Class FXML Support"},{"location":"/features.html#additional","text":"Internationalization Support (i18n) Expression Language Support (JUEL)","title":"Additional"},{"location":"/getting_started.html","text":"","title":"Getting Started"},{"location":"/getting_started.html#getting-started","text":"","title":"Getting Started"},{"location":"/getting_started.html#setup-base-application-with-giter8","text":"g8 https://github.com/sfxcode/sapphire-sbt.g8","title":"Setup Base Application with Giter8"},{"location":"/getting_started.html#use-one-of-the-demo-applications-as-blueprint","text":"Demos are included under the demos folder of this project.\nSee Samples","title":"Use one of the demo applications as blueprint"},{"location":"/development/index.html","text":"","title":"Development"},{"location":"/development/index.html#development","text":"Development Tools IntelliJ IDE SceneBuilder ScenicView SBT Plugins Hot Reloading DCEVM and HotSwapAgent Hot Scene Reloading","title":"Development"},{"location":"/development/tools.html","text":"","title":"Development Tools"},{"location":"/development/tools.html#development-tools","text":"Some useful tools.","title":"Development Tools"},{"location":"/development/tools.html#intellij-ide","text":"IntelliJ is my favorite IDE for Scala / JavaFX Coding. Even the Community Edition has all features for developing JavaFX Applications.","title":"IntelliJ IDE"},{"location":"/development/tools.html#scenebuilder","text":"Scenebuilder (backed by Gluon) can be found at the Gluon Site.","title":"SceneBuilder"},{"location":"/development/tools.html#scenicview","text":"Scenic View is a JavaFX application designed to make it simple to understand the current state of your application scenegraph, and to also easily manipulate properties of the scenegraph without having to keep editing your code. This lets you find bugs, and get things pixel perfect without having to do the compile-check-compile dance.","title":"ScenicView"},{"location":"/development/tools.html#sbt-plugins","text":"","title":"SBT Plugins"},{"location":"/development/tools.html#sbt-javafx","text":"(Simple Build Tool) plugin for building JavaFx Application\nDocumentation","title":"sbt-javafx"},{"location":"/development/hot_reload.html","text":"","title":"Hot Reloading"},{"location":"/development/hot_reload.html#hot-reloading","text":"Some tips and tricks to speed your development.","title":"Hot Reloading"},{"location":"/development/hot_reload.html#dcevm-and-hotswapagent","text":"DCEVM together with HotSwapAgent can speedup your development. It enhance the ability of reloading of changed classes especially with scala.","title":"DCEVM and HotSwapAgent"},{"location":"/development/hot_reload.html#hot-scene-reloading","text":"Reloading can be used for:\nCSS FXML Bundle Content","title":"Hot Scene Reloading"},{"location":"/development/hot_reload.html#setup","text":"Create a new method in your ApplicationController:\ndef reload(): Unit = {\n    // Styling\n    reloadStyles()\n    // Resources\n    applicationEnvironment.clearResourceBundleCache()\n    applicationEnvironment.loadResourceBundle(\"bundles/application\")\n    // FXML\n    val newMainViewController = getController[MainViewController]()\n    replaceSceneContent(newMainViewController)\n  }\nCreate a Button anywhere in your application and an corresponding action:\ndef actionReload(event: ActionEvent) {\n    getBean[ApplicationController]().reload()\n  }","title":"Setup"},{"location":"/development/hot_reload.html#intellij","text":"Very useful for compile on save is the Save Actions Plugin","title":"IntelliJ"},{"location":"/tutorial/index.html","text":"","title":"Tutorial"},{"location":"/tutorial/index.html#tutorial","text":"Tutorial Setup Tutorial Application Tutorial Main View Controller Tutorial Navigation","title":"Tutorial"},{"location":"/tutorial/setup.html","text":"","title":"Tutorial Setup"},{"location":"/tutorial/setup.html#tutorial-setup","text":"","title":"Tutorial Setup"},{"location":"/tutorial/setup.html#sources","text":"The sources for this tutorial are in the Github Tutorial Directory of sapphire-core in the appdemo package.","title":"Sources"},{"location":"/tutorial/setup.html#setup","text":"Easy Project Setup by usibg the sapphire-core giter8 template. See giter8 Documentation for g8 setup.\nGiter8 template for sapphire-core.","title":"Setup"},{"location":"/tutorial/setup.html#usage","text":"g8 https://github.com/sfxcode/sapphire-sbt.g8","title":"Usage"},{"location":"/tutorial/setup.html#base-project-structure","text":"","title":"Base Project Structure"},{"location":"/tutorial/setup.html#ide","text":"IntelliJ IDEA Community Edition or other IDE with Scala support.","title":"IDE"},{"location":"/tutorial/setup.html#fxml-editor","text":"Helpful for FXML Editing is the Scene Builder.","title":"FXML Editor"},{"location":"/tutorial/setup.html#scene-graph-visualization","text":"For understanding of the sccene graph there is a tool called Scenic View .","title":"Scene Graph Visualization"},{"location":"/tutorial/application.html","text":"","title":"Tutorial Application"},{"location":"/tutorial/application.html#tutorial-application","text":"","title":"Tutorial Application"},{"location":"/tutorial/application.html#application-object","text":"A sapphire application must contain an Application object that extends FXApp.\npackage com.sfxcode.sapphire.core.demo.tutorial\n\nimport com.sfxcode.sapphire.core.application.FXApp\n\nobject Application extends FXApp {\n\n  override def height: Int = 555\n\n  override def width: Int = 700\n\n  override def forceMaxWidth: Boolean = true\n\n  override def forceMaxHeight: Boolean = true\n}","title":"Application object"},{"location":"/tutorial/application.html#applicationcontroller","text":"Application controller is used for startup purposes.\nNormally the main scene content is replaced by a ViewController.\nHere we will use a MainViewController and later we connect a Navigation-, Workspace- and StatusBarController.\npackage com.sfxcode.sapphire.core.demo.tutorial\n\nimport java.util.{Locale, ResourceBundle}\n\nimport com.sfxcode.sapphire.core.controller.DefaultWindowController\nimport com.sfxcode.sapphire.core.demo.tutorial.controller.MainViewController\nimport javax.enterprise.context.ApplicationScoped\nimport javax.enterprise.inject.Produces\nimport javax.inject.Named\n\n@Named\n@ApplicationScoped\nclass ApplicationController extends DefaultWindowController {\n\n  lazy val mainViewController: MainViewController =\n    getController[MainViewController]()\n\n  def applicationDidLaunch() {\n    logger.info(\"start \" + this)\n    // #Resources\n    applicationEnvironment.loadResourceBundle(\"bundles/application\")\n    // #Resources\n    replaceSceneContent(mainViewController)\n  }\n\n  def reload(): Unit = {\n    // Styling\n    reloadStyles()\n    // Resources\n    applicationEnvironment.clearResourceBundleCache()\n    applicationEnvironment.loadResourceBundle(\"bundles/application\")\n    // FXML\n    val newMainViewController = getController[MainViewController]()\n    replaceSceneContent(newMainViewController)\n  }\n\n  @Produces\n  def applicationName: ApplicationName =\n    ApplicationName(configStringValue(\"application.name\"))\n\n  // #CustomBundle\n  // only example values ...\n  override def resourceBundleForView(viewPath: String): ResourceBundle =\n    if (viewPath.contains(\"mySpecialViewName\")) {\n      val path        = \"myCustomResourcePath\"\n      val classLoader = Thread.currentThread().getContextClassLoader\n      ResourceBundle.getBundle(path, Locale.getDefault(), classLoader)\n    }\n    else {\n      super.resourceBundleForView(viewPath) // =  applicationEnvironment.resourceBundle\n    }\n\n  // #CustomBundle\n\n}\n\ncase class ApplicationName(name: String)","title":"ApplicationController"},{"location":"/tutorial/application.html#mainviewcontroller","text":"The following code snippet loads the MainViewController by the FXMLoader from the CDI managed ApplicationController Bean.\ndef mainViewController = getController[MainViewController]()\nThis pattern for Controller-Loading is commonly used in sapphire-core Framework.","title":"MainViewController"},{"location":"/tutorial/main_view.html","text":"","title":"Tutorial Main View Controller"},{"location":"/tutorial/main_view.html#tutorial-main-view-controller","text":"","title":"Tutorial Main View Controller"},{"location":"/tutorial/main_view.html#main-fxml-file","text":"The MainViewController in the /controller/MainViewController needs a valid FXML File. The bindings for Navigation, Workspace and StatusBar Controller uses the fx:id values.\n<BorderPane>\n    <top>\n        <AnchorPane fx:id=\"navigationPane\"/>\n    </top>\n    <center>\n        <AnchorPane fx:id=\"workspacePane\"/>\n    </center>\n    <bottom>\n        <AnchorPane fx:id=\"statusPane\"/>\n    </bottom>\n</BorderPane>","title":"Main FXML File"},{"location":"/tutorial/main_view.html#mainviewcontroller","text":"For adding SubController and displaying their UI content following steps are needed:\nPrepare SubController Connect with FXML identifier Define ContentManager Load Controller in the MainViewController LifeCycle Optional Prepare Functions for Controller switching Optional CDI based Functions / Injection Points","title":"MainViewController"},{"location":"/tutorial/main_view.html#prepare-subcontroller","text":"lazy val workspaceController: WorkspaceController =\n  getController[WorkspaceController]()\nlazy val barChartController: BarChartController =\n  getController[BarChartController]()\nlazy val personController: PersonController =\n  getController[PersonController]()\nlazy val navigationController: NavigationController =\n  getController[NavigationController]()\nlazy val statusBarController: StatusBarController =\n  getBean[StatusBarController]()","title":"Prepare SubController"},{"location":"/tutorial/main_view.html#connect-with-fxml-identifier","text":"@FXML\nvar workspacePane: Pane = _\n@FXML\nvar statusPane: Pane = _\n@FXML\nvar navigationPane: Pane = _","title":"Connect with FXML identifier"},{"location":"/tutorial/main_view.html#contentmanager","text":"var workspaceManager: ContentManager  = _\nvar navigationManager: ContentManager = _\nvar statusBarManager: ContentManager  = _","title":"ContentManager"},{"location":"/tutorial/main_view.html#init-controller","text":"override def didGainVisibilityFirstTime() {\n  super.didGainVisibility()\n  navigationManager = ContentManager(navigationPane, this, navigationController)\n  statusBarManager = ContentManager(statusPane, this, statusBarController)\n  workspaceManager = ContentManager(workspacePane, this, workspaceController)\n}","title":"Init Controller"},{"location":"/tutorial/main_view.html#cdi-optional-","text":"Make use of CDI Observers, Injection Points, …\ndef listenToChanges(@Observes event: ContentDidChangeEvent) {\n  logger.debug(event.toString)\n}","title":"CDI (optional)"},{"location":"/tutorial/navigation.html","text":"","title":"Tutorial Navigation"},{"location":"/tutorial/navigation.html#tutorial-navigation","text":"","title":"Tutorial Navigation"},{"location":"/tutorial/navigation.html#navigation-fxml-file","text":"<AnchorPane fx:controller=\"NavigationController\">\n    <children>\n        <HBox>\n            <children>\n                <Button onAction=\"#actionToggleWorkspace\"\n                        text=\"%navigation.toggle\"/>\n                <Button onAction=\"#actionShowPersonController\"\n                        text=\"FXBean Demo\"/>\n                <Button onAction=\"#actionClickButton\"\n                        text=\"Action Button\"/>\n                <Button id=\"debugButton\" onAction=\"#actionReload\"\n                        text=\"[Debug] Reload\"/>\n            </children>\n            <padding>\n                <Insets left=\"10.0\" top=\"7.0\"/>\n            </padding>\n        </HBox>\n    </children>\n    <stylesheets>\n        <URL value=\"@default.css\"/>\n    </stylesheets>\n</AnchorPane>","title":"Navigation FXML File"},{"location":"/tutorial/navigation.html#navigationcontroller","text":"package com.sfxcode.sapphire.core.demo.tutorial.controller\n\nimport com.sfxcode.sapphire.core.demo.tutorial.ApplicationController\nimport javafx.event.ActionEvent\nimport javafx.scene.control.Button\n\nclass NavigationController extends AbstractViewController {\n\n  def actionToggleWorkspace(event: ActionEvent) {\n    actionClickButton(event)\n    val actualController    = workspaceManager.actualController\n    val barChartController  = mainViewController.barChartController\n    val workspaceController = mainViewController.workspaceController\n    if (actualController == workspaceController) {\n      workspaceManager.updatePaneContent(barChartController)\n    }\n    else\n      workspaceManager.updatePaneContent(workspaceController)\n  }\n\n  def actionShowPersonController(event: ActionEvent): Unit = {\n    actionClickButton(event)\n    val personController = mainViewController.personController\n    workspaceManager.updatePaneContent(personController)\n  }\n\n  def actionClickButton(event: ActionEvent) {\n    logger.debug(event.toString)\n\n    // resolve controller by getViewController lookup\n    val controller = getViewController[StatusBarController]()\n    controller.foreach { c =>\n      val button = event.getSource.asInstanceOf[Button]\n      c.updateLabel(button)\n    }\n  }\n\n  def actionReload(event: ActionEvent): Unit = {\n    actionClickButton(event)\n    getBean[ApplicationController]().reload()\n  }\n\n}","title":"NavigationController"},{"location":"/detail/index.html","text":"","title":"Core Concepts"},{"location":"/detail/index.html#core-concepts","text":"ViewController Features Controller Lifecycle FXBean Features Example FXBean Adapter Example KeyBindings Code Sample Create Bindings Add Converter FxmlLoading Features Example Different FXML-Path lookup pattern Expression Language I18n Support Adding Default (Application) Resource Bundle FXML Support","title":"Core Concepts"},{"location":"/detail/view_controller.html","text":"","title":"ViewController"},{"location":"/detail/view_controller.html#viewcontroller","text":"The ViewController is the core pattern for component based application design.","title":"ViewController"},{"location":"/detail/view_controller.html#features","text":"Controller Lifecycle Node Locator Controller CDI Additions","title":"Features"},{"location":"/detail/view_controller.html#controller-lifecycle","text":"Main Part of the ViewController pattern is the exchange of the actual presented view. Building a dynamic UI is all about build actual screen display from different views (like Lego) and to exchange parts of the screen in case of navigation or other activities.","title":"Controller Lifecycle"},{"location":"/detail/fxbean.html","text":"","title":"FXBean"},{"location":"/detail/fxbean.html#fxbean","text":"FXBean is one of the core concepts of this framework. It is an adapter for Java/Scala Beans (Maps) for automatic JavaFX Binding. FXBean does all the JavaFX Property Binding for your Application.","title":"FXBean"},{"location":"/detail/fxbean.html#features","text":"Every Java / Scala Bean can be used for FXBean FXBean has additional support for Java / Scala Maps FXBean resolves Expressions on bean FXBean creates Properties needed for Binding on demand FXBean has change management by default\nHint Use Sapphire Includes for implicit Bean to FXBean Conversion","title":"Features"},{"location":"/detail/fxbean.html#example","text":"case class Author(name: String)\ncase class Book(id: Long, title: String, pages: Int, author: Author)\n\n// create FXBean for sample case class\nval scalaBook = Book(1, \"Programming In Scala\", 852, Author(\"Martin Odersky\"))\nval book = FXBean[Book](scalaBook)\n\n// getValue and updateValue are used for bean property access and modification\n// getProperty, getStringProperty ... \n// are used for automatic create a JavaFX Property\nval title = book.getValue(\"title\")\n// \"Programming In Scala\"\n\nval titleProperty = book.getStringProperty(\"title\")\n\nbook.updateValue(\"title\", \"Programming In Scala 3.0\")\n// title is updated, titleProperty as well\n\nval newTitle = book.getValue(\"title\")\n// \"Programming In Scala 3.0\"\n\nval newTitleFromProperty = titleProperty.getValue  // \"Programming In Scala 3.0\"\n\n// getValue and updateValue for underlying class by dot syntax\nval authorName = book.getValue(\"author.name\")  // \"Martin Odersky\"","title":"Example"},{"location":"/detail/fxbean_adapter.html","text":"","title":"FXBean Adapter"},{"location":"/detail/fxbean_adapter.html#fxbean-adapter","text":"FXBeanAdapter reflects changes of bean properties to the UI and vice versa.\nIt automatically creates bidirectional bindings to any bean.On bean update old bindings are cleared and new bindings for the new bean are created.","title":"FXBean Adapter"},{"location":"/detail/fxbean_adapter.html#example","text":"","title":"Example"},{"location":"/detail/fxbean_adapter.html#define-adapter","text":"@FXML\nvar personBox: VBox = _","title":"Define Adapter"},{"location":"/detail/fxbean_adapter.html#add-bindings-and-converter","text":"override def didGainVisibilityFirstTime(): Unit = {\n  super.didGainVisibilityFirstTime()\n\n  val bindings = KeyBindings(\"id\", \"name\", \"age\", \"test\")\n  // Expression Binding Example\n  bindings.add(\"person\", \"${sf:i18n('personText', _self.name(), _self.age())}\")\n\n  adapter.addBindings(bindings)\n  // Converter Example\n  adapter.addIntConverter(\"age\")\n\n  personBox.visibleProperty().bind(adapter.hasBeanProperty)\n}\n\ndef items: ObservableList[FXBean[Person]] = PersonFactory.personList","title":"Add Bindings and Converter"},{"location":"/detail/fxbean_adapter.html#change-adapter-items","text":"def selectPerson(person: FXBean[Person]): Unit = {\n  adapter.set(person)\n}\n\ndef actionRevert(event: ActionEvent): Unit = {\n  adapter.revert()\n}","title":"Change Adapter items"},{"location":"/detail/bindings.html","text":"","title":"KeyBindings"},{"location":"/detail/bindings.html#keybindings","text":"KeyBindings is a helper class for FXBean Adapter. It provides Bindings from beans to ui representations.\nIt contains convenience functions for adding keys to FXBean Adapter and for conversion.","title":"KeyBindings"},{"location":"/detail/bindings.html#code-sample","text":"","title":"Code Sample"},{"location":"/detail/bindings.html#fxml-snippet","text":"<Label id=\"person\"/>\n<TextField id=\"name\"/>\n<TextField fx:id=\"age\"/>","title":"FXML Snippet"},{"location":"/detail/bindings.html#scala-viewcontroller-snippet","text":"val bindings = KeyBindings(\"id\", \"name\", \"age\", \"test\")\n// Expression Binding Example\nbindings.add(\"person\", \"${sf:i18n('personText', _self.name(), _self.age())}\")\n\nadapter.addBindings(bindings)\n// Converter Example\nadapter.addIntConverter(\"age\")","title":"Scala ViewController Snippet"},{"location":"/detail/bindings.html#create-bindings","text":"Bindings are created by the value of the id or fx:id attributes in the fxml file.\nNote If node lookup from appication root node does not work, you can fix it by adding a parent Node to FXBeanAdapter. @FXML\nvar personBox: VBox = _","title":"Create Bindings"},{"location":"/detail/bindings.html#add-converter","text":"","title":"Add Converter"},{"location":"/detail/fxml_loading.html","text":"","title":"FxmlLoading"},{"location":"/detail/fxml_loading.html#fxmlloading","text":"","title":"FxmlLoading"},{"location":"/detail/fxml_loading.html#features","text":"load fxml by different pattern (convention over configuration) CDI powered ViewController (FXMLLoader, FXMLLoaderProvider) ViewController rootPane is bound to fxml root element","title":"Features"},{"location":"/detail/fxml_loading.html#example","text":"ViewController extends FxmlLoading trait. FxmlLoading provide the\ngetController[T <: ViewController](fxml: String = \"\")\nmethod. The package path of the controller is the default fxml directory. [name]Controller is converted to [name].fxml (WorkspaceController -> Workspace.fxml).\npackage controller\n\nclass MainViewController extends ViewController with LazyLogging {\n\n  // workspaces\n  lazy val workspaceController = getController[WorkspaceController]()\n  // navigation\n  lazy val defaultNavigationController = \n     getController[DefaultNavigationController]()\n  \n}\nWorkspaceController fxml must be saved at /controller/Workspace.fxml.","title":"Example"},{"location":"/detail/fxml_loading.html#different-fxml-path-lookup-pattern","text":"Hint In case of mixing this pattern, FXML-Path is resolved from Pattern 1 to 3","title":"Different FXML-Path lookup pattern"},{"location":"/detail/fxml_loading.html#pattern-1-define-path-in-getcontroller-","text":"lazy val controller = \n     getController[WorkspaceController](\"/fxml/special/path/special_name.fxml\")\n@FxmlLoader(path=“/fxml/widget/Person.fxml”) class PersonController extends AbstractViewController { WorkspaceController fxml must be saved at /fxml/special/path/special_name.fxml.","title":"Pattern 1: Define path in getController:"},{"location":"/detail/fxml_loading.html#pattern-2-define-path-in-fxmlloader-annotation-","text":"@FxmlLoader(path=\"/fxml/widget/Person.fxml\")\nclass PersonController extends AbstractViewController {\n  // some stuff ...\n}\nWorkspaceController fxml must be saved at /fxml/widget/Person.fxml.","title":"Pattern 2: Define path in FxmlLoader Annotation:"},{"location":"/detail/fxml_loading.html#pattern-3-define-path-in-application-conf-","text":"sapphire.core.fxml.basePath=\"/fxml/\"\nWorkspaceController fxml must be saved at /fxml/Workspace.fxml.","title":"Pattern 3: Define path in application.conf:"},{"location":"/detail/expression_language.html","text":"","title":"Expression Language"},{"location":"/detail/expression_language.html#expression-language","text":"Expression Language is based on JUEL and can be used in\nFXBean Context FXML ViewController CDI Beans (over ApplicationEnvironment) every other Scala Code","title":"Expression Language"},{"location":"/detail/i18n.html","text":"","title":"I18n Support"},{"location":"/detail/i18n.html#i18n-support","text":"Internationalization oder I18n is available in different places of sapphire core.\nFXML Files ViewController, WindowController Expression Language","title":"I18n Support"},{"location":"/detail/i18n.html#adding-default-application-resource-bundle","text":"Normally you will add resources in the ApplicationController.\napplicationEnvironment.loadResourceBundle(\"bundles/application\")\nThe ApplicationEnvironment will hold the reference to the loaded resources.","title":"Adding Default (Application) Resource Bundle"},{"location":"/detail/i18n.html#fxml-support","text":"If there is a loaded resource, you can use it in the fxml files with the following pattern: %\n<Button mnemonicParsing=\"false\" onAction=\"#actionToggleWorkspace\" text=\"%navigation.toggle\" />\nIf you want a special resource bundle for one or more fxml files, you have to override resourceBundleForView in the ApplicationController.\n// only example values ...\noverride def resourceBundleForView(viewPath: String): ResourceBundle =\n  if (viewPath.contains(\"mySpecialViewName\")) {\n    val path        = \"myCustomResourcePath\"\n    val classLoader = Thread.currentThread().getContextClassLoader\n    ResourceBundle.getBundle(path, Locale.getDefault(), classLoader)\n  }\n  else {\n    super.resourceBundleForView(viewPath) // =  applicationEnvironment.resourceBundle\n  }","title":"FXML Support"},{"location":"/sample/index.html","text":"","title":"Examples"},{"location":"/sample/index.html#examples","text":"Samples Basic Tutorial Login Demo Issues Demo Multiple Windows Demo Samples Advanced sapphire-jfoenix-demo","title":"Examples"},{"location":"/sample/basic.html","text":"","title":"Samples Basic"},{"location":"/sample/basic.html#samples-basic","text":"Basic sapphire-core examples.","title":"Samples Basic"},{"location":"/sample/basic.html#tutorial","text":"Tutorial Application.","title":"Tutorial"},{"location":"/sample/basic.html#login-demo","text":"JavaFX Login Demo pimped by Sapphire.","title":"Login Demo"},{"location":"/sample/basic.html#issues-demo","text":"JavaFX Issues Demo pimped by Sapphire.","title":"Issues Demo"},{"location":"/sample/basic.html#multiple-windows-demo","text":"JavaFX Multiple Windows Demo pimped by Sapphire.","title":"Multiple Windows Demo"},{"location":"/sample/advanced.html","text":"","title":"Samples Advanced"},{"location":"/sample/advanced.html#samples-advanced","text":"Advanced sapphire-core examples.","title":"Samples Advanced"},{"location":"/sample/advanced.html#sapphire-jfoenix-demo","text":"There is a Demo Project build with JFoenix on github: sapphire-jfoenix-demo","title":"sapphire-jfoenix-demo"},{"location":"/extension.html","text":"","title":"Sapphire Extension"},{"location":"/extension.html#sapphire-extension","text":"The Sapphire Extension Project adds additional features to sapphire-core.\nIt provides some useful helpers for javafx applications build on top of the sapphire-core framework.","title":"Sapphire Extension"},{"location":"/extension.html#features","text":"","title":"Features"},{"location":"/extension.html#common","text":"Advanced Table Support Advanced Filter Support","title":"Common"},{"location":"/extension.html#controls","text":"DataListView DualDataListView","title":"Controls"},{"location":"/extension.html#controller","text":"DataTableController EditorController Maser/Detail Controller","title":"Controller"},{"location":"/extension.html#download","text":"","title":"Download"},{"location":"/scalafx.html","text":"","title":"ScalaFX"},{"location":"/scalafx.html#scalafx","text":"Until Version 1.5.x Sapphire depends on ScalaFX, a DSL for JavaFX written in Scala.\nVersion 1.6.x and newer versions are built without direct ScalaFX dependency, because ScalaFX (JavaFX UI DSL) is not basicly needed for sapphire functionality. However, it can be used on top of this framework as a very useful addition in writing JavaFX Applications.\nMost of my own applications use scalafx because of a very useful DSL and some nice wrapper functions around javafx with extended functionality and / or the more scala friendly syntax.","title":"ScalaFX"},{"location":"/scalafx.html#documentation","text":"Documentation can be found at www.scalafx.org/docs/home/\nDocumentation is a little bit out of date, but there are also some other places to find useful information.\nGithub Release Notes Stackoverflow ProScalaFX","title":"Documentation"},{"location":"/scalafx.html#usage","text":"Include following snippet in your build.sbt file:\nlibraryDependencies += \"org.scalafx\" %% \"scalafx\" % \"12.0.2-R18\"\nIn your classes add scalafx Includes to your imports:\nimport scalafx.Includes._","title":"Usage"},{"location":"/changes.html","text":"","title":"Version History"},{"location":"/changes.html#version-history","text":"","title":"Version History"},{"location":"/changes.html#current-version","text":"","title":"Current Version"},{"location":"/changes.html#download","text":"","title":"Download"},{"location":"/changes.html#history","text":"# Changes #\n\n## Versions\n\n### 1.6.9\n* JavaFX 13.0.2\n* openwebbeans 2.0.12\n\n### 1.6.7\n* typesave config update\n* openwebbeans 2.0.12\n\n### 1.6.6\n* FXMLLoading url and resources properties now Options\n* FXMLLoading i18n support [sapphire-core/issues/18](https://github.com/sfxcode/sapphire-core/issues/18)\n* ResourceBundleHolder added\n* Add i18n method to Expression Language\n\n### 1.6.5\n* FXBeanAdapter refactor convert methods to KeyConverter\n* Refactor FXBean by extending BeanProperties\n* KeyConverter add meyhods for standard JavaFX Converters\n\n### 1.6.4\n* FXMLLoader suppport ContextClassLoader for Stream loading fallback\n* use import scala.language.implicitConversions to mark implicits\n\n### 1.6.3\n* Fix Bug in FXMLoading\n\n### 1.6.2\n* CollectionExtensions: add implicits\n* fix Map Changes Bug\n* remove SceneExtensions\n\n### 1.6.1\n* ExtendedObservableList addChangeListener, addInvalidationListener\n* Dependency Updates\n\n### 1.6.0\n* scalafx dependency removed\n* SceneExtensions, CollectionExtensions added\n* * Includes removed\n\n### 1.5.1\n* ConfigValues trait added\n* dropped ConfigurationProvider\n* Annotation for Fxml added: FxmlLoader\n\n### 1.5.0\n* JavaFX 12.0.1\n* ScalaFX 12.0.1-R17\n* re-enable scala 2.11\n* Java 11, 12\n\n### 1.4.5\n* javafx 11.0.2\n* org.apache.openwebbeans:openwebbeans-impl : 2.0.9 -> 2.0.10\n* org.specs2:specs2-core:test               : 4.3.6 -> 4.4.0\n* sbt 1.2.8\n\n\n### 1.4.4\n\n* com.typesafe.scala-logging:scala-logging  : 3.9.0 -> 3.9.2\n* org.apache.openwebbeans:openwebbeans-impl : 2.0.8 -> 2.0.9\n* org.json4s:json4s-native                  : 3.6.2 -> 3.6.3\n* org.specs2:specs2-core                    : 4.3.5 -> 4.3.6\n\n### 1.4.3\n* FXBean Change management for complex case classes\n\n### 1.4.2\n* scala 2.12.8\n* openwebbeans 2.0.8\n* sbt 1.2.7\n\n### 1.4.1\n* sbt 1.2.6\n* child controller handling\n\n### 1.4.0\n* OpenJFX 11\n* Java 11\n* drop scala 2.11 support\n* scala 2.12.7\n* scalafx 11-R16\n\n### 1.3.4\n\n* appController exit method\n\n\n### 1.3.3\n\n* FXBean Fixes\n* FXBean property methods added e.g. getStringProperty\n\n\n### 1.3.0\n\n* Paradox Documentation\n* Lifecycle refactored (canGainVisibility)\n* ViewController children controller added\n\n\n### 1.1.0\n\n* ScalaFxmlLoading\n* ScalaViewController\n\n### 1.0.8\n\n* integration tests\n* deltaspike 1.5.2\n\n### 1.0.7\n\n* internationalization\n* travis integration\n* test cleanup\n* Integration tests moved to it","title":"History"}]}